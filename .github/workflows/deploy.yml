name: Build, Test and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: eks-cluster-tech-challenge-ordermanagement
  ECR_REPO_NAME: tech-challenge-ordermanagement-repo
  IMAGE_TAG: latest   # <-- sempre latest

jobs:
  gradlew:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      - name: Run tests and generate coverage
        run: ./gradlew clean build

  deploy:
    needs: gradlew
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:latest -f docker/Dockerfile .
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:latest

      - name: Update deployment.yaml with latest image
        run: |
          sed -i "s|\${registry}|${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:latest|g" k8s/deployment.yaml

      - name: Configure kubeconfig for EKS
        uses: silverlyra/setup-aws-eks@v0.1
        with:
          cluster: ${{ env.EKS_CLUSTER_NAME }}

      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/
